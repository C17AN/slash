/* eslint-disable @typescript-eslint/no-var-requires */
const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');
const pnpapi = require('pnpapi');
const path = require('path');

require('@babel/register')({
  presets: [['@babel/preset-env', { targets: { node: 'current' } }], '@babel/preset-typescript'],
  extensions: ['.js', '.jsx', '.ts', '.tsx'],
  ignore: [
    path => {
      const locator = pnpapi.findPackageLocator(path);

      if (locator.name.startsWith('@toss/')) {
        return false;
      }

      return true;
    },
  ],
  cache: true,
});

/** @type {import('@docusaurus/types').DocusaurusConfig} */
module.exports = {
  title: '토스 프론트엔드 라이브러리',
  tagline: '토스 프론트엔드 라이브러리 문서',
  url: 'https://toss-frontend-libraries.dev.toss.bz/',
  baseUrl: '/',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'https://static.toss.im/tds/favicon/favicon.ico',
  organizationName: 'toss',
  projectName: 'toss-frontend-libraries',
  themeConfig: {
    navbar: {
      title: 'Slash',
      logo: {
        alt: '토스',
        src: 'https://static.toss.im/icons/png/4x/icon-toss-logo.png',
      },
      items: [
        {
          type: 'doc',
          docId: 'common/utils/README',
          position: 'left',
          label: 'Docs',
        },
        {
          href: 'https://github.toss.bz/toss/frontend-libraries',
          label: 'GitHub',
          position: 'right',
        },
      ],
    },
    footer: {
      style: 'dark',
      links: [
        {
          title: 'API',
          items: [
            {
              label: 'API',
              to: '/libraries/utils/README',
            },
          ],
        },
        {
          title: '더보기',
          items: [
            {
              label: 'GitHub',
              href: 'https://github.com/toss/toss-frontend-chapter',
            },
          ],
        },
      ],
      copyright: `Copyright © ${new Date().getFullYear()} Toss Frontend Chapter.`,
    },
    prism: {
      theme: lightCodeTheme,
      darkTheme: darkCodeTheme,
    },
  },
  themes: [
    [
      require.resolve('@easyops-cn/docusaurus-search-local'),
      {
        hashed: true,
        indexPages: true,
        language: ['en', 'ko'],
      },
    ],
  ],
  plugins: [require.resolve('./scripts/webpack5-compat.js')],
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          path: '../packages',
          routeBasePath: '/libraries',
          sidebarPath: require.resolve('./sidebars.libraries.js'),
          exclude: ['**/CHANGELOG.md'],
          /*
           .md file의 origin인 file을 바로 수정할 수 있는 GitHub 링크를 editUrl로 사용합니다.
           @example
           input: packages/a11y/src/ScreenReaderOnly/ScreenReaderOnly.tsx.generated.md
           output: https://github.toss.bz/toss/frontend-libraries/edit/main/packages/a11y/src/ScreenReaderOnly/ScreenReaderOnly.tsx

           input: packages/a11y/src/ScreenReaderOnly/ScreenReaderOnly.md
           output: https://github.toss.bz/toss/frontend-libraries/edit/main/packages/a11y/src/ScreenReaderOnly/ScreenReaderOnly.md
           */
          editUrl: ({ docPath }) => {
            const dirname = path.dirname(docPath);
            const markdownFilename = getFilename(docPath);
            const sourceFilename = getSourceFilename(markdownFilename);
            const editUrl = `${GITHUB_EDIT_PAGE_PREFIX}/packages/${dirname}/${sourceFilename}`;
            return editUrl;
          },
        },
        pages: {
          path: 'pages',
          routeBasePath: '/',
          include: ['**/*.{js,jsx,ts,tsx,md,mdx}'],
          mdxPageComponent: '@theme/MDXPage',
        },
      },
    ],
  ],
};

const GITHUB_EDIT_PAGE_PREFIX = 'https://github.toss.bz/toss/frontend-libraries/edit/main';

/*
 @example
 input: twdk-next/src/components/TossNextApp/WebNavbarProvider/Navbar/type.generated.md
 output: type.generated.md
 */
function getFilename(path) {
  const names = path.split('/');
  const filename = names[names.length - 1];

  if (filename == null) {
    throw new Error(`path가 올바르지 않습니다. ${path}`);
  }

  return filename;
}

function getSourceFilename(markdownFilename) {
  const isAutoGenerated = markdownFilename.endsWith('.generated.md');
  return isAutoGenerated ? markdownFilename.replace('.generated.md', '') : markdownFilename;
}
